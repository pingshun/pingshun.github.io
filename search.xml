<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[macOS下安装mysqlclient和mysql-python提示'mysql_config not found'错误]]></title>
    <url>%2F2018%2F12%2F13%2Fmysql-python-install-error%2F</url>
    <content type="text"><![CDATA[前提:mac没有安装mysql的server端,只想安装client端利用mysql-python连接远程的mysql服务器。 错误:用 ‘pip install mysql-python’,安装时提示’mysql_config not found’错误: Collecting mysql-python Downloading MySQL-python-1.2.5.zip (108kB) 100% |████████████████████████████████| 110kB 30kB/s Complete output from command python setup.py egg_info: sh: mysql_config: command not found Traceback (most recent call last): File &quot;&lt;string&gt;&quot;, line 20, in &lt;module&gt; File &quot;/private/tmp/pip-build-NP8J3v/mysql-python/ setup.py&quot;, line 17, in &lt;module&gt; metadata, options = get_config() File &quot;setup_posix.py&quot;, line 43, in get_config libs = mysql_config(&quot;libs_r&quot;) File &quot;setup_posix.py&quot;, line 25, in mysql_config raise EnvironmentError(&quot;%s not found&quot; % (mysql_config.path,)) EnvironmentError: mysql_config not found 解决: brew install mysql-connector-c 找到 mysql_config 文件: which mysql_config 编辑这个mysql_config文件: 找到这行: libs=”$libs -l “ 修改成: libs=”$libs -lmysqlclient -lssl -lcrypto” pip install mysqlclient pip install MySQL-python]]></content>
      <tags>
        <tag>maxOS</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyCharm常用快捷键]]></title>
    <url>%2F2018%2F10%2F29%2Fuse-pycharm%2F</url>
    <content type="text"><![CDATA[PyCharm的一些常用快捷键随手记 编辑⌘ + 鼠标放在代码上 显示代码简要信息⌘ + ⌥ + L 格式化代码⌘ + / 注释/取消注释与行注释⌘ + ⌥ + / 注释/取消注释与块注释⌃ + ⌥ + O 优化import 查询&amp;替换Double ⇧ 查询任何东西⌘ + F 文件内查找⌘ + R 文件内替换⌘ + ⇧ + F 全局查找（根据路径）⌘ + ⇧ + R 全局替换（根据路径） 导航⌘ + ⌥ + ← 退回到上一个操作的地方⌘ + ⌥ + → 前进到上一个操作的地方⌘ + B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处]]></content>
      <tags>
        <tag>PyCharm</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客的备份与恢复]]></title>
    <url>%2F2018%2F08%2F23%2Fhexo-backup-and-restore%2F</url>
    <content type="text"><![CDATA[使用hexo搭建好博客以后，一般都会发布到比如github之类的公网上，本地保留一份源文件。但是天有不测风云，难免会遇到源文件丢失、损坏等情况，所以hexo提供了一个将源文件也备份到git上的方法。刚好最近换了一台电脑使用了一次从github上恢复的功能，中间路子不熟，遇到了一点麻烦，所以把这个过程记录下来，以备不时之需。 备份备份很简单，这里以github备份为例(别的也没用过。。。)：只需要在工程目录下的_config.yml文件中，寻找deploy段。如果你使用过hexo deploy将博客deploy到github上的功能的话，应该已经存在了一个配置类似于 - type： git repository: https://github.xxxx branch: master 找到这段之后，在后面追加一个配置： - type: git repository: https://github.com/xxxx [跟上面一样] branch: src extend_dirs: / ignore_hidden: false ignore_pattern: public: . node_modules: . 加上这段配置之后，再做git deploy的时候，会同时把源文件push到src这个branch里面，以后就不怕丢失了 恢复如果你换了电脑，或者到了需要恢复的时候，千万先不要做hexo d以免github上的源文件被覆盖！！！你需要做的是以下几步: 把源文件的branch也就是上面的src branch拷贝到本地git clone -b src https://github.com/xxxx/xxxx.git 安装必要的node模块进入目录，执行 npm install 完成这一步，按理说你应该已经恢复整个工程了 问题按说完成上面那套动作之后，应该所有东西都OK了，直接 hexo g hexo d 就可以继续愉快的发博客了，然鹅… 现实总是如此残酷，我完成这些之后，使用hexo s在本地看一下，神马东西都没有。。。。 经过一顿折腾，终于找到问题： hexo d备份的时候，并没有将我用的theme目录push到github上，所以导致hexo generate的时候报错 解决办法： 将用到的主题(我的是next)手动下载到themes目录下面 进一步的问题通过上面的解决，博客功能基本上全恢复了。但是，因为主题备有备份，所以主题相关的配置就丢失了，需要自己重新做主题的配置，也就是修改themes/next/_config.yml 解决办法： 我没有研究为什么themes/next没有被上传到github上，我猜大概是因为，我的next也是从github上下载的，是一个单独的git目录。我想一定有办法可以解决，将next也跟你的源文件一起备份，但我实在没时间找资料了。 我的解决办法是在themes目录下新建一个目录，比如config_backup，然后将next/_config.yml文件以及别的修改过的配置文件拷贝到这个config_backup下面。 这样再做hexo d的时候，这些配置文件就被备份了，以后直接拷贝回去就能恢复了]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一整套电商全栈解决方案，包括后端服务、微信前端、手机APP]]></title>
    <url>%2F2018%2F08%2F09%2Fproject-for-online-mall%2F</url>
    <content type="text"><![CDATA[本项目原本做的是一个海外留学生活助手，含电商，社交等热门模块。 起名 Bibi ，是本人对我女友的爱称。一年多前，也是源于我们的创业想法，才开展了这个项目。 不过这个项目后来失败了，就再也没有维护了。 时至今日，决定把这套代码开源出来。 具体的 Quickstart 和 Deploy 方式，已写在各个项目的 README 上 Bibi 提供电商全栈解决方案，配合以下项目使用: https://github.com/seasonstar/bibi112 电商服务后端，基于 Flask, MongoDB, Redis, Celery, RabbitMQ, 支持 Python 3.5. https://github.com/seasonstar/bibi-frontend49 微信前端项目，采用 Angularjs, gulp https://github.com/seasonstar/bibi-ionic150 Hybrid App 源码，采用 Ionic, Cordova 有问题的请提 issue ，也希望能跟更多的朋友学习，交流。欢迎 Star &amp; Fork 原文链接：http://ionichina.com/t/topic/1264]]></content>
      <tags>
        <tag>app</tag>
        <tag>ionic</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xcode7--免证书真机调试]]></title>
    <url>%2F2017%2F09%2F22%2Fdeploy-ios-app-to-device%2F</url>
    <content type="text"><![CDATA[Xcode7之前，想要真机调试，必须花99刀购买开发者账号，而且步骤繁琐，需要下载证书。随着Xcode7的推出，大幅度的简化了真机调试的步骤，对ios开发工作者和正在学习ios开发的众多码农们，可以说是个不小的福利。现在，我就详细的向大家介绍一下如何免证书真机调试。 第一步：准备工作（Apple ID,iphone手机,Xcode7) Apple ID 申请网址：https://appleid.apple.com/cn（Apple ID作为在苹果官网执行任何操作的通行证，申请步骤非常简单）; iphone手机 这个就不用多说了，真机调试没有手机就白谈了; Xcode7 可以从AppStore中下载; 第二步：打开Xcode 选择屏幕左上角Xcode-&gt; PReferencese 第三部：选择Account 点击左下角的+按钮登陆Apple ID 第四步：登陆你的Apple ID 第五步:登陆成功之后，在右侧会显示小伙伴的账号在iOS和Mac上都是free的，双击这一列（或者点击选择view details） 第五步：这里需要一定时间获取你的Apple ID的开发者信息，点击iOS Development 后面的create ，然后稍等片刻，直到create按钮不见了。 第六步：到了这里基本上已经结束—-开始真机测试：打开需要真机测试的项目插上手机（Xcode第一次链接手机会很慢，可以选择Xcode菜单栏中的window-&gt;devices查看手机是否准备就绪了），选择项目文件-&gt; General - &gt; Team -&gt; 选择你属于你的Apple ID ，再点击Team 下面的fix issue修复Team 正下方的警告。 第七步：最后一个问题，你最终会发现Xcode会弹出一个框（process launch failed: Security），这里需要打开你手机的设置-&gt;通用- &gt; 描述文件-&gt; 选择你的Apple ID - &gt; 点击信任 至此，真机调试的过程就搞好了，是不是比以前简单多了？？？ 转载于 Xcode7–免证书真机调试]]></content>
      <tags>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker 常用命令备忘]]></title>
    <url>%2F2017%2F09%2F06%2Fuse-docker%2F</url>
    <content type="text"><![CDATA[[不太]常用的一些docker命令 container相关操作 启动停止container [docker start/stop/restart]docker start [OPTIONS] CONTAINER [CONTAINER…]:启动一个或多个已经被停止的容器docker stop [OPTIONS] CONTAINER [CONTAINER…]:停止一个运行中的容器docker restart [OPTIONS] CONTAINER [CONTAINER…]:重启容器 创建container [docker run／create] docker run [OPTIONS] IMAGE [COMMAND] [ARG…] 创建一个新的容器并运行一个命令OPTIONS说明： -a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项； -d: 后台运行容器，并返回容器ID； -i: 以交互模式运行容器，通常与 -t 同时使用； -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用； –name=”nginx-lb”: 为容器指定一个名称； –dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致； –dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致； -h “mars”: 指定容器的hostname； -e username=”ritchie”: 设置环境变量； –env-file=[]: 从指定文件读入环境变量； –cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定CPU运行； -m :设置容器使用内存最大值； –net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型； –link=[]: 添加链接到另一个容器； –expose=[]: 开放一个端口或一组端口；实例: 使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data docker run -p 80:80 -v /data:/data -d nginx:latest docker create [OPTIONS] IMAGE [COMMAND] [ARG…] 创建一个新的容器但不启动它 用法同 docker run Docker exec 命令docker exec [OPTIONS] CONTAINER COMMAND [ARG…] 在运行的容器中执行命令OPTIONS说明： -d :分离模式: 在后台运行 -i :即使没有附加也保持STDIN 打开 -t :分配一个伪终端实例： docker exec -it mynginx /bin/sh 在容器mynginx中开启一个交互模式的终端 docker exec mynginx ls /tmp/ 在mynginx里ls ／tmp docker遇到的问题docker start 时提示iptable错误错误信息：Error response from daemon: driver failed programming external connectivity on endpoint xxx (xxxxxx): (iptables failed: iptables –wait -t nat -A DOCKER -p tcp -d 0/0 –dport 8080 -j DNAT –to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name. (exit status 1))Error: failed to start containers: xxxxxx 原因：重启防火墙或者别的操作导致docker 服务添加的chain被删除了解决：重启docker服务即可 （service docker restart）]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo写一篇博客]]></title>
    <url>%2F2017%2F09%2F05%2Fuse-hexo%2F</url>
    <content type="text"><![CDATA[我发现我已经健忘到了无可救药的地步了…前几天刚弄好的博客，今天想记点东西，居然忘了如何写一篇新的文章了… 崩溃ing 先把如何使用hexo添加博文记录下来，以后有时间再慢慢整理吧: 添加博文 hexo new ‘blog_title’ 位置: ‘source/_posts/blog_title.md’，编辑内容 hexo g; #生成静态文件hexo d; #部署 添加页面 hexo new page “\&lt;page_name>” 位置: ‘source/\&lt;page_name>/index.md’, 编辑内容 修改’themes/\&lt;theme_name>/_config.yml’里的‘menu’项，添加一项 ‘\&lt;menu_name>: /\&lt;page_name>’ 我用的是Next主题，可以在’themes/\&lt;theme_name>/_config.yml’的menu icon项里指定图标，然后在相应的语言文件‘themes/\&lt;theme_name>/languages/\&lt;language_file>.yml’里设置菜单项的当前语言名称 hexo g; #生成静态文件hexo d; #部署]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ssh用户配置文件config来简化你的ssh]]></title>
    <url>%2F2017%2F08%2F23%2Fuse-ssh-config%2F</url>
    <content type="text"><![CDATA[有时候我们用ssh去连接server的时候经常会带上很多参数(port, username…),有的时候需要连接一个超级长的HostName，有的时候需要连接不同的server使用不同的密钥文件…这些需求，都可以用ssh的用户配置文件来简化，这个文件位置：~/.ssh/config（没有的话自己建一个就行了）这个配置文件的用法：Host 别名 HostName 主机名 Port 端口 User 用户名 IdentityFile 密钥文件]]></content>
      <tags>
        <tag>技术</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老OutMan开始忘事了...]]></title>
    <url>%2F2017%2F08%2F23%2Fmy-first-post%2F</url>
    <content type="text"><![CDATA[听起来有点悲伤，但不得不承认，年纪大了之后就慢慢开始忘事了…很多东西用过之后再用的时候，会发现已经完全忘了怎么用了，于是乎又像第一次用一样重新度娘重新google，这个过程实在太不友好…作为一个程序猿，发现脑子不再那么好用是一件很痛苦的事情，但同事老王说这是正常的物理规律，不必太在意。老王比我年长那么多，也算是过来人，既然是过来人，那我就当是人生经验吧。想到这里，我总算有了一丢丢安慰。老祖宗说滴水之恩当涌泉相报，看在我确实得到了一丢丢的安慰的份上，我也就不再计较老王经常“忘了”还我钱的事儿了…人类在物理规律面前总是无能为力，我也是。既然没办法像以前那样把东西牢记在脑子里，那就写在纸上吧。所以我开了个这个博客，记录一些自己觉得有用的东西，就当一个在线的记事本吧。]]></content>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
</search>
